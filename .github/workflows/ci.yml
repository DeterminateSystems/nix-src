name: "CI"

on:
  pull_request:
  push:
    branches:
      - master

permissions:
  id-token: "write"
  contents: "read"

jobs:

  build_x86_64-linux:
    uses: ./.github/workflows/build.yml
    with:
      os: ubuntu-latest # UbuntuLatest32Cores128G

  #build_aarch64-linux:
  #  uses: ./.github/workflows/build.yml
  #  with:
  #    os: UbuntuLatest32Cores128GArm

  build_aarch64-darwin:
    uses: ./.github/workflows/build.yml
    with:
      os: macos-latest

  test_x86_64-linux:
    uses: ./.github/workflows/test.yml
    needs: build_x86_64-linux
    with:
      os: ubuntu-latest # UbuntuLatest32Cores128G

  #test_aarch64-linux:
  #  uses: ./.github/workflows/test.yml
  #  needs: build_aarch64-linux
  #  with:
  #    os: UbuntuLatest32Cores128GArm

  test_aarch64-darwin:
    uses: ./.github/workflows/test.yml
    needs: build_aarch64-darwin
    with:
      os: macos-latest

  # Steps to test CI automation in your own fork.
  # Dockerhub:
  # 1. Sign-up for https://hub.docker.com/
  # 2. Store your dockerhub username as DOCKERHUB_USERNAME in "Repository secrets" of your fork repository settings (https://github.com/$githubuser/nix/settings/secrets/actions)
  # 3. Create an access token in https://hub.docker.com/settings/security and store it as DOCKERHUB_TOKEN in "Repository secrets" of your fork
  check_secrets:
    permissions:
      contents: none
    name: Check Docker secrets present for installer tests
    runs-on: ubuntu-latest
    outputs:
      docker: ${{ steps.secret.outputs.docker }}
    steps:
      - name: Check for secrets
        id: secret
        env:
          _DOCKER_SECRETS: ${{ secrets.DOCKERHUB_USERNAME }}${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          echo "::set-output name=docker::${{ env._DOCKER_SECRETS != '' }}"

  docker_push_image:
    needs: [check_secrets, test_x86_64-linux]
    permissions:
      contents: read
      packages: write
    if: >-
      github.event_name == 'push' &&
      github.ref_name == 'master' &&
      needs.check_secrets.outputs.docker == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - uses: DeterminateSystems/nix-installer-action@main
    - uses: DeterminateSystems/magic-nix-cache-action@main
    - run: echo NIX_VERSION="$(nix --experimental-features 'nix-command flakes' eval .\#nix.version | tr -d \")" >> $GITHUB_ENV
    - run: nix --experimental-features 'nix-command flakes' build .#dockerImage -L
    - run: docker load -i ./result/image.tar.gz
    - run: docker tag nix:$NIX_VERSION ${{ secrets.DOCKERHUB_USERNAME }}/nix:$NIX_VERSION
    - run: docker tag nix:$NIX_VERSION ${{ secrets.DOCKERHUB_USERNAME }}/nix:master
    # We'll deploy the newly built image to both Docker Hub and Github Container Registry.
    #
    # Push to Docker Hub first
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/nix:$NIX_VERSION
    - run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/nix:master
    # Push to GitHub Container Registry as well
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Push image
      run: |
        IMAGE_ID=ghcr.io/${{ github.repository_owner }}/nix
        # Change all uppercase to lowercase
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

        docker tag nix:$NIX_VERSION $IMAGE_ID:$NIX_VERSION
        docker tag nix:$NIX_VERSION $IMAGE_ID:latest
        docker push $IMAGE_ID:$NIX_VERSION
        docker push $IMAGE_ID:latest
        # deprecated 2024-02-24
        docker tag nix:$NIX_VERSION $IMAGE_ID:master
        docker push $IMAGE_ID:master

  installer_test:
    needs: build_x86_64-linux
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - run: nix build -L .#hydraJobs.installerTests.ubuntu-22-04.x86_64-linux.install-default

  vm_tests:
    needs: build_x86_64-linux
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - run: nix build -L .#hydraJobs.tests.githubFlakes .#hydraJobs.tests.tarballFlakes .#hydraJobs.tests.functional_user

  flake_regressions:
    needs: build_x86_64-linux
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout nix
        uses: actions/checkout@v4
      - name: Checkout flake-regressions
        uses: actions/checkout@v4
        with:
          repository: NixOS/flake-regressions
          path: flake-regressions
      - name: Checkout flake-regressions-data
        uses: actions/checkout@v4
        with:
          repository: NixOS/flake-regressions-data
          path: flake-regressions/tests
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - run: nix build --out-link ./new-nix && PATH=$(pwd)/new-nix/bin:$PATH scripts/flake-regressions.sh
